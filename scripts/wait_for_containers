#!/usr/bin/env bash

inventory_file="./hosts"

while getopts ":i:c:t:d:h" o; do
  case "${o}" in
    i)
      inventory_file="${OPTARG}"
      ;;
    c)
      min_num_hosts_to_wait="${OPTARG}"
      ;;
    t)
      timeout="${OPTARG}"
      ;;
    d)
      delay="${OPTARG}"
      ;;
  esac
done

if [ -z "$timeout" ]; then
  echo "Expecting -t flag with timeout"
  exit 1
fi
if [ -z "$delay" ]; then
  echo "Expecting -d flag with test wait retry delay"
  exit 1
fi
if [ -z "$min_num_hosts_to_wait" ]; then
  echo "Expecting -c flag with minimum number of hosts to wait"
  exit 1
fi

if [ $timeout -lt $delay ]; then
  $delay=60
fi

if [ $timeout -ge 7200 ]; then
  delay=600
fi

cat >tmp_playbook.yml <<EOL
- hosts: all
  gather_facts: false
  tasks:
  - name: get list of running containers
    command: docker ps -q --filter name=baseliner_{{ inventory_hostname_short }}
    register: ps_result
  - debug:
      msg: '{{ ps_result }}'
  - name: print message if no containers are running
    debug:
      msg: "INFO: no containers running"
    when: (ps_result.stdout_lines | length) == 0
EOL

ANSIBLE_LOG_PATH="${PWD}/wait_for_containers.log"

start_time=$(date +%s)
timeout_time=$((start_time + timeout))

while :; do

  sleep $delay

  curr_time=$(date +%s)
  if [ $curr_time -ge $timeout_time ]; then
    echo "WARNING: timeout waiting for $min_num_hosts_to_wait hosts"
    break
  fi

  echo '' > "${ANSIBLE_LOG_PATH}"

  ansible-playbook -i "${inventory_file}" ./tmp_playbook.yml &> /dev/null
  ansible_result=$?

  num_hosts_finished=$(cat "${ANSIBLE_LOG_PATH}" | grep 'INFO: no containers' | wc -l)

  if [ $num_hosts_finished -ge $min_num_hosts_to_wait ] ; then
    echo "$num_hosts_finished hosts finished running their containers"
    break
  fi

done

set +e
ansible all -i "${inventory_file}" -m shell -a "docker stop baseliner_{{ inventory_hostname_short }}" &> /dev/null
ansible all -i "${inventory_file}" -m shell -a "docker rm -f baseliner_{{ inventory_hostname_short }}" &> /dev/null

rm -f $ANSIBLE_LOG_PATH tmp_playbook.yml
