---
- name: check if image already exists
  shell: 'docker images | grep {{ bench.image }} | wc -l'
  register: image_exists

- name: pull image
  command: 'docker pull {{ bench.image }}'
  register: dockerpull_cmd
  failed_when:
  - dockerpull_cmd.rc != 0
  - image_exists.rc == 1
  - not {{ ignore_pull_error_if_image_exists | default(false) }}

- name: initialize docker_flags variable
  set_fact:
    docker_flags: ''

- name: add environment to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ bench.environment | default({}) }}'
- name: add implicit environment from bench_params variable
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ bench_params | default({}) }}'

- name: check if we have host-specific environment
  set_fact:
    env_host_map: '{{ bench.environment_host | default({}) }}'
- name: add host-specific environment to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ env_host_map[inventory_hostname] | default({}) }}'

- name: add devices to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --device {{ item }}'
  with_items: '{{ bench.devices | default([]) }}'

- name: add network mode to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --net={{ bench.network_mode }}'
  when: 'bench.network_mode is defined'

- name: add ipc mode to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --ipc={{ bench.ipc }}'
  when: 'bench.ipc is defined'

- name: add ports to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -p {{ item }}'
  with_items: '{{ bench.ports | default([]) }}'

- name: add volumes to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -v {{ item }}'
  with_items: '{{ bench.volumes | default([]) }}'

- name: set entrypoint
  set_fact:
    docker_flags: '{{ docker_flags }} --entrypoint={{ bench.entrypoint }}'
  when: 'bench.entrypoint is defined'

- name: set limits
  set_fact:
    docker_flags: '{{ docker_flags }} --{{ item.key }}={{ item.value }}'
  with_dict: '{{ bench.limits | default({}) }}'

- name: add capabilities
  set_fact:
    docker_flags: '{{ docker_flags }} --cap-add={{ bench.cap_add | join(",") }}'
  when: 'bench.cap_add is defined'

- name: remove capabilities
  set_fact:
    docker_flags: '{{ docker_flags }} --cap-drop={{ bench.cap_drop | join(",") }}'
  when: 'bench.cap_drop is defined'

- name: set privileged mode
  set_fact:
    docker_flags: '{{ docker_flags }} --privileged'
  when: 'bench.privileged | default(False)'

- name: set memory constraint
  set_fact:
    docker_flags: '{{ docker_flags }} --memory={{ bench.memory }}'
  when: 'bench.memory is defined'

- name: set memory-swap constraint
  set_fact:
    docker_flags: '{{ docker_flags }} --memory-swap={{ bench.memory_swap }}'
  when: 'bench.memory_swap is defined'

- name: set parent cgroup
  set_fact:
    docker_flags: '{{ docker_flags }} --cgroup-parent={{ bench.cgroup_parent }}'
  when: 'bench.cgroup_parent is defined'

- debug:
    msg: 'Running docker command: docker run --rm {{ docker_flags }} {{ bench.image }} {{ bench.command | default("") }}'

- name: run container
  shell: docker run --name baseliner --rm {{ docker_flags }} {{ bench.image }} {{ bench.command | default("") }}
  environment: '{{ bench_params }}'
  async: '{{ bench.test_timeout | default(test_timeout | default(10800)) }}'
  poll: 60
  register: docker_run_async_result
  ignore_errors: true

- name: get status of async task
  async_status:
    jid: '{{ docker_run_async_result.ansible_job_id }}'
  register: docker_run_result
  when:
  - 'docker_run_async_result is defined'
  - 'docker_run_async_result.ansible_job_id is defined'
  ignore_errors: true

- name: stop running container if timedout
  shell: 'docker stop baseliner || docker rm -f baseliner'
  when:
  - 'docker_run_result is defined'
  - 'docker_run_result.finished is defined'
  - 'not docker_run_result.finished'
  ignore_errors: true

- debug:
    msg: 'WARNING: test timed out and we killed it.'
  when:
  - 'docker_run_result is defined'
  - 'docker_run_result.finished is defined'
  - 'not docker_run_result.finished'
- debug:
    msg: 'WARNING: test terminated with non-zero exit code.'
  when:
  - 'docker_run_result is defined'
  - 'docker_run_result.finished is defined'
  - 'docker_run_result.finished'
  - 'docker_run_result.rc != 0'

- name: record elapsed time in output folder
  local_action:
    module: copy
    content: '{{ docker_run_result.delta }}'
    dest: '{{ output_folder }}/runtime'
  when:
  - 'docker_run_result is defined'
  - 'docker_run_result.finished is defined'
  - 'docker_run_result.finished'

- name: capture stdout
  local_action:
    module: copy
    content: '{{ docker_run_result.stdout }}'
    dest: '{{ output_folder }}/std.out'
  when:
  - 'docker_run_result is defined'
  - 'docker_run_result.finished is defined'
  - 'docker_run_result.finished'

- name: capture stderr
  local_action:
    module: copy
    content: '{{ docker_run_result.stderr }}'
    dest: '{{ output_folder }}/std.err'
  when:
  - 'docker_run_result is defined'
  - 'docker_run_result.finished is defined'
  - 'docker_run_result.finished'
