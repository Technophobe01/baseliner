---
- name: pull image
  command: 'docker pull {{ bench.image }}'

- name: initialize docker_flags variable
  set_fact:
    docker_flags: ''

- name: stop container
  shell: 'docker stop $(docker ps -aq --filter ancestor={{ bench.image }})'
  ignore_errors: true
- name: remove container
  shell: 'docker rm $(docker ps -aq --filter ancestor={{ bench.image }})'
  ignore_errors: true

- name: add environment to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ bench.env | default({}) }}'
- name: add implicit environment from params variable
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}={{ item.value }}'
  with_dict: '{{ params | default({}) }}'

- name: check if we have host-specific environment
  set_fact:
    env_host_map: '{{ bench.env_host | default({}) }}'
- name: add host-specific environment to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ env_host_map[inventory_hostname] | default({}) }}'

- name: add devices to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --device {{ item }}'
  with_items: '{{ bench.devices | default([]) }}'

- name: add network mode to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --net={{ bench.network_mode }}'
  when: 'bench.network_mode is defined'

- name: add ipc mode to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --ipc={{ bench.ipc }}'
  when: 'bench.ipc is defined'

- name: add ports to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -p {{ item }}'
  with_items: '{{ bench.ports | default([]) }}'

- name: add volumes to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -v {{ item }}'
  with_items: '{{ bench.volumes | default([]) }}'

- name: set entrypoint
  set_fact:
    docker_flags: '{{ docker_flags }} --entrypoint={{ bench.entrypoint }}'
  when: 'bench.entrypoint is defined'

- name: set limits
  set_fact:
    docker_flags: '{{ docker_flags }} --{{ item.key }}={{ item.value }}'
  with_dict: '{{ bench.limits | default({}) }}'

- name: record time before execution
  local_action: command date +%s
  register: time_before
  run_once: true
  when: 'bench.measure_runtime | default(true)'

- name: run container
  shell: >
    docker run --rm --name={{ bench.name }}-{{ inventory_hostname }} \
      {{ docker_flags }} \
      {{ bench.image }} \
      {{ bench.command | default("") }}

- name: record time after execution
  local_action: command date +%s
  register: time_after
  run_once: true
  when: 'bench.measure_runtime | default(true)'

- name: record elapsed time in output folder
  local_action: shell echo "{{bench.name}},$(({{time_after.stdout}}-{{time_before.stdout}}))" > {{results_path | default("./results/")}}/runtime_{{bench.name}}_{{inventory_hostname}}
  when: 'bench.measure_runtime | default(true)'
  run_once: true
